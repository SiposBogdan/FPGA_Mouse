<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="BASYS3_CB17"/>
    <a name="downloadFrequency" val="1.0"/>
    <a name="simulationFrequency" val="2.0"/>
    <boardmap boardname="BASYS3_CB17">
      <mc key="/Anozi" pmap="273_234_0,225_234_0,180_234_0,130_234_0"/>
      <mc key="/Catozi" pmap="136_245_0,154_248_0,154_262_0,136_274_0,130_263_0,130_249_0,138_258_0"/>
      <mc key="/PC" map="527,86"/>
      <mc key="/PD" map="544,104"/>
      <mc key="/clk" map="321,237"/>
      <mc key="/invers" map="78,323"/>
      <mc key="/is_left" map="92,295"/>
      <mc key="/reset" map="117,323"/>
    </boardmap>
    <comp lib="0" loc="(110,290)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="reset"/>
    </comp>
    <comp lib="0" loc="(1390,250)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Anozi"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(1390,270)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Catozi"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(180,440)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="PD"/>
    </comp>
    <comp lib="0" loc="(180,460)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="PC"/>
    </comp>
    <comp lib="0" loc="(480,310)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="invers"/>
    </comp>
    <comp lib="0" loc="(70,350)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(700,250)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="is_left"/>
      <a name="output" val="true"/>
    </comp>
    <comp loc="(1020,250)" name="numarator">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="numarator_1"/>
    </comp>
    <comp loc="(1390,250)" name="ssd">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ssd_1"/>
    </comp>
    <comp loc="(400,400)" name="PS2_READER">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ps2_reader_1"/>
    </comp>
    <comp loc="(560,550)" name="divizor_frecventa_de_200Hz">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="divizor_frecventa_de_200hz_1"/>
    </comp>
    <comp loc="(700,250)" name="uc">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="uc_1"/>
    </comp>
    <wire from="(1020,250)" to="(1170,250)"/>
    <wire from="(1020,270)" to="(1170,270)"/>
    <wire from="(1020,290)" to="(1170,290)"/>
    <wire from="(110,290)" to="(130,290)"/>
    <wire from="(1170,310)" to="(1170,550)"/>
    <wire from="(130,290)" to="(130,420)"/>
    <wire from="(130,290)" to="(330,290)"/>
    <wire from="(130,420)" to="(180,420)"/>
    <wire from="(140,350)" to="(140,400)"/>
    <wire from="(140,350)" to="(200,350)"/>
    <wire from="(140,400)" to="(180,400)"/>
    <wire from="(200,310)" to="(200,350)"/>
    <wire from="(200,310)" to="(290,310)"/>
    <wire from="(200,350)" to="(480,350)"/>
    <wire from="(290,200)" to="(290,310)"/>
    <wire from="(290,200)" to="(800,200)"/>
    <wire from="(330,290)" to="(330,380)"/>
    <wire from="(330,290)" to="(480,290)"/>
    <wire from="(330,380)" to="(800,380)"/>
    <wire from="(400,250)" to="(400,400)"/>
    <wire from="(400,250)" to="(480,250)"/>
    <wire from="(400,420)" to="(450,420)"/>
    <wire from="(450,270)" to="(450,420)"/>
    <wire from="(450,270)" to="(480,270)"/>
    <wire from="(480,330)" to="(480,350)"/>
    <wire from="(560,550)" to="(1170,550)"/>
    <wire from="(70,350)" to="(90,350)"/>
    <wire from="(700,270)" to="(800,270)"/>
    <wire from="(700,290)" to="(800,290)"/>
    <wire from="(800,200)" to="(800,250)"/>
    <wire from="(800,310)" to="(800,380)"/>
    <wire from="(90,350)" to="(140,350)"/>
    <wire from="(90,350)" to="(90,550)"/>
    <wire from="(90,550)" to="(340,550)"/>
  </circuit>
  <vhdl name="PS2_READER">library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity PS2_READER is
    port (
        clock : in std_logic;
        reset : in std_logic;
        PD : in std_logic;
        PC : in std_logic;
        buton_stanga : out std_logic;
        buton_dreapta : out std_logic
    );
end PS2_READER;

architecture Behavioral of PS2_READER is
    signal biti_mouse : std_logic_vector(42 downto 0) := (others =&gt; '0');
    signal numar_biti_dati_mouse : std_logic_vector(5 downto 0) := (others =&gt; '0');
    signal plin : std_logic;
    signal stanga_apasat : std_logic := '0';
    signal dreapta_apasat : std_logic := '0';
 
begin
	--NUMARARE BITI
    process (reset, PC)
    begin
        if reset = '1' then
            numar_biti_dati_mouse &lt;= (others =&gt; '0');
        elsif falling_edge(PC) then
            if numar_biti_dati_mouse &lt;= 42 then
                numar_biti_dati_mouse &lt;= numar_biti_dati_mouse + 1;
            else
                numar_biti_dati_mouse &lt;= (others =&gt; '0');
            end if;
        end if;
    end process;

    process (PC, reset)
    begin
        plin &lt;= '0';
        if reset = '1' then
            biti_mouse &lt;= (others =&gt; '0');
        elsif falling_edge(PC) then
            biti_mouse &lt;= biti_mouse(41 downto 0) &amp; PD;
            if numar_biti_dati_mouse = 42 then
                plin &lt;= '1';
            end if;
        end if;
    end process;

    process (clock)
    begin
        if rising_edge(clock) then    
            buton_stanga &lt;= '0';
            buton_dreapta &lt;= '0';
            
            if plin = '1' then

                if biti_mouse(41) = '1' and stanga_apasat = '0' then
                    buton_stanga &lt;= '1';
                elsif biti_mouse(40) = '1' and dreapta_apasat = '0' then
                    buton_dreapta &lt;= '1';
                end if;
                stanga_apasat &lt;= biti_mouse(41);
                dreapta_apasat &lt;= biti_mouse(40);
            end if;    
        end if;
    end process;
end Behavioral;
</vhdl>
  <vhdl name="numarator">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

ENTITY numarator IS
  PORT (
    clk: in std_logic;
    up, down: in std_logic;
    reset: in std_logic;
    --load: in std_logic;
    --clear: in std_logic;
    counterout1: out std_logic_vector (3 DOWNTO 0);
    counterout2: out std_logic_vector (3 DOWNTO 0);
    counterout3: out std_logic_vector (3 DOWNTO 0)
    --carry, borrow: out std_logic
  );
END numarator;

ARCHITECTURE Structural OF numarator IS
  signal inceput: std_logic_vector (3 downto 0) := "0000";
  signal ok  : std_logic := '0';
  signal okd  : std_logic := '0';
  signal oprit: std_logic_vector (3 downto 0) := "1001";
  signal val1 : std_logic_vector (3 downto 0) := "0000";
  signal val2 : std_logic_vector (3 downto 0) := "0000";
  signal val3 : std_logic_vector (3 downto 0) := "0000";
BEGIN
  process(clk,reset)
    variable c: std_logic_vector (3 downto 0) := "0000";
    variable c1: std_logic_vector (3 downto 0) := "0000";
    variable c2: std_logic_vector (3 downto 0) := "0000";
    variable stop : std_logic := '0';
    variable stopd : std_logic := '0';
  begin
  if reset = '1' then
		c2 := "0000";
          c1 := "0000";
          c := "0000";
          val1 &lt;= c;
          val2 &lt;= c1;
         	val3 &lt;= c2;
  else
    if rising_edge(clk) then

      if stop = '0' then
        if up = '1' then
          if ok = '0' then
            ok &lt;= '1';
            c := "0000";
            c1 := "0000";
          else
          
            c := c + 1;
            stopd := '0';
          end if;
        
        if c = "1010" then
            c := inceput;
          c1 := c1 + 1;
         val1 &lt;= c;
          val2 &lt;= c1;
          val3 &lt;= c2;
          if c1 = "1010" then
          c2 := c2 + 1;
          c1 := inceput;
          c := inceput;
          val1 &lt;= c;
          val2 &lt;= c1;
         val3 &lt;= c2;
          if c2 = "1010" then
          stop := '1';
          c2 := "1001";
          c1 := "1001";
          c := "1001";
          val1 &lt;= c;
          val2 &lt;= c1;
         val3 &lt;= c2;
          end if;
         
            
          end if;
          ELSE
      val1 &lt;= c;
      val2 &lt;= c1;
      val3 &lt;= c2;
        end if;
        end if;
      end if;
    

       
    if stopd = '0' then
        if down = '1' then
          if ok = '0' then
            ok &lt;= '1';
            c := "0000";
            c1 := "0000";
          else
            c := c - 1;
            stop := '0';
          end if;
        
        if c = "1111" then
            c := oprit;
          c1 := c1 - 1;
         val1 &lt;= c;
          val2 &lt;= c1;
          val3 &lt;= c2;
          if c1 = "1111" then
          c2 := c2 - 1;
          c1 := oprit;
          c := oprit;
          val1 &lt;= c;
          val2 &lt;= c1;
         val3 &lt;= c2;
          if c2 = "1111" then
          stopd := '1';
          c2 := "0000";
          c1 := "0000";
          c := "0000";
          val1 &lt;= c;
          val2 &lt;= c1;
         val3 &lt;= c2;
          end if;
         
            
          end if;
          ELSE
      val1 &lt;= c;
      val2 &lt;= c1;
      val3 &lt;= c2;
        end if;
        end if;
      end if;


    end if;
    end if;
  end process;

  counterout1 &lt;= val1;
  counterout2 &lt;= val2;
  counterout3 &lt;= val3;
END Structural;
</vhdl>
  <vhdl name="uc">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY uc IS
  PORT (
  	buton_stanga: in std_logic;
  	buton_dreapta: in std_logic;
  	reset: in std_logic;
  	invers: in std_logic;
	clk: in std_logic;
	is_left:out std_logic;
	up: out std_logic;
	down: out std_logic
    );
END uc;


ARCHITECTURE behav OF uc IS

BEGIN

	process(clk,reset)
	begin
	if reset = '1' then
	up &lt;= '0';
	down &lt;= '0';
	else
	if rising_edge(clk) then
		if invers = '1' then
			is_left &lt;= '0';
			if buton_stanga = '1' then
				down &lt;= '1';
			else
				down &lt;= '0';	
			end if;
			
			if buton_dreapta = '1' then
				up &lt;= '1';
			else
				up &lt;= '0';	
			end if;
		else
			is_left &lt;= '1';
			if buton_stanga = '1' then
				up &lt;= '1';
			else
				up &lt;= '0';	
			end if;
			
			if buton_dreapta = '1' then
				down &lt;= '1';
			else
				down &lt;= '0';	
			end if;
				
			end if;
	end if;
	end if;
	end process;

END behav;
</vhdl>
  <vhdl name="ssd">LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE ieee.std_logic_unsigned.all;

USE ieee.numeric_std.all;
ENTITY ssd IS
  PORT (
  	n1 : in std_logic_vector (3 downto 0);
  	n2 : in std_logic_vector (3 downto 0);
  	n3 : in std_logic_vector (3 downto 0);
  	CLK :  in std_logic;
  	Anod : out std_logic_vector (3 downto 0);
  	Catod : out std_logic_vector (6 downto 0)

  	--pozitie : out std_logic_vector (2 downto 0)
  
    );
END ssd;


ARCHITECTURE behav OF ssd IS

signal cat : std_logic_vector (6 downto 0) := "0000000";
signal ano : std_logic_vector (3 downto 0) := "0000";
signal poz : std_logic_vector (2 downto 0) := "000";
signal digit : std_logic_vector (3 downto 0) := "0000";


BEGIN


	process(CLK)
	begin
		if rising_edge(CLK) then
			poz &lt;= poz +1;
		end if;
	end process;

	process(poz)	
		begin
			case poz is
				--when "00" =&gt;
					--ano &lt;= "1000";

				--when "01" =&gt;
				--	ano &lt;= "0100";
				when "001" =&gt;
					ano &lt;= "0100";
					digit &lt;= n3;
				when "010" =&gt;
					ano &lt;= "0010";
					digit &lt;= n2 ;
				when "011" =&gt;
					ano &lt;= "0001";
					digit &lt;= n1;
				when others =&gt;
					ano &lt;= "0000";
					digit &lt;= "1111";
				end case;
		end process;

	process(digit)
		begin
			case digit is
				when "0000" =&gt;
					cat &lt;= "0111111";
				when x"1" =&gt;
					cat &lt;= "0000110";
				when x"2" =&gt;
					cat &lt;= "1011011";
				when x"3" =&gt;
					cat &lt;= "1001111";
				when x"4" =&gt;
					cat &lt;= "1100110";
				when x"5" =&gt;
					cat &lt;= "1101101";
				when x"6" =&gt;
					cat &lt;= "1111101";
				when x"7" =&gt;
					cat &lt;= "0100111";
				when x"8" =&gt;
					cat &lt;= "1111111";
				when x"9" =&gt;
					cat &lt;= "1101111";
				when others =&gt;
					cat &lt;= "0000000";
			end case;
		end process;

	Anod &lt;= ano ;
	Catod &lt;= cat;

END behav;</vhdl>
  <vhdl name="divizor_frecventa_de_200Hz">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity divizor_frecventa_de_200Hz is
    Port (
        clk_in : in  STD_LOGIC;
        clk_out: out STD_LOGIC
    );
end divizor_frecventa_de_200Hz;

architecture behav of divizor_frecventa_de_200Hz is
    signal temporal: STD_LOGIC;
    signal counter : integer range 0 to 124999 := 0;
begin
    process (clk_in) begin
        if rising_edge(clk_in) then
            if (counter = 124999) then
                temporal &lt;= NOT(temporal);
                counter &lt;= 0;
            else
                counter &lt;= counter + 1;
            end if;
         end if;
    end process;
    
    clk_out &lt;= temporal;
end behav;</vhdl>
</project>
